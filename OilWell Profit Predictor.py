#!/usr/bin/env python
# coding: utf-8

# **–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ì–ª–∞–≤–†–æ—Å–ì–æ—Å–ù–µ—Ñ—Ç—å¬ª**
# 
# ## üìã –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
# 
# –†–∞–±–æ—Ç–∞—è –≤ –¥–æ–±—ã–≤–∞—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ì–ª–∞–≤–†–æ—Å–ì–æ—Å–ù–µ—Ñ—Ç—å¬ª, —è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –±—É—Ä–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–µ—Ñ—Ç—è–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω. –ü—Ä–æ–µ–∫—Ç –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–∞—Ö –Ω–µ—Ñ—Ç–∏ –≤ —Ç—Ä—ë—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö, –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–±—ä—ë–º–∞ –∑–∞–ø–∞—Å–æ–≤, –æ—Ü–µ–Ω–∫—É –ø—Ä–∏–±—ã–ª–∏ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏–∫–∏ Bootstrap. –¶–µ–ª—å ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–∞—Ä–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∏—Å–∫–∞—Ö.
# 
# 
# ## üéØ –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
# 
# - –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–∫–≤–∞–∂–∏–Ω –≤ —Ç—Ä—ë—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
# - –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–±—ä—ë–º–∞ –∑–∞–ø–∞—Å–æ–≤ –Ω–µ—Ñ—Ç–∏
# - –û—Ç–æ–±—Ä–∞—Ç—å —Å–∫–≤–∞–∂–∏–Ω—ã —Å –Ω–∞–∏–≤—ã—Å—à–∏–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–ø–∞—Å–∞–º–∏
# - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
# - –û—Ü–µ–Ω–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Bootstrap
# - –í—ã–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—É–º–º–∞—Ä–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é
# 
# ## üìä –î–∞–Ω–Ω—ã–µ
# 
# –î–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–≤–∞–∂–∏–Ω–∞—Ö –≤ —Ç—Ä—ë—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö:
# - **–ü—Ä–∏–∑–Ω–∞–∫–∏**:
#   - `id` ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–∫–≤–∞–∂–∏–Ω—ã
#   - `f0`, `f1`, `f2` ‚Äî —Ç—Ä–∏ –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞ (—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∫–≤–∞–∂–∏–Ω)
# - **–¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è**:
#   - `product` ‚Äî –æ–±—ä—ë–º –∑–∞–ø–∞—Å–æ–≤ –≤ —Å–∫–≤–∞–∂–∏–Ω–µ (—Ç—ã—Å. –±–∞—Ä—Ä–µ–ª–µ–π)

# ## –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[1]:


import pandas as pd
import os
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from numpy.random import RandomState
from tqdm import tqdm


# In[2]:


def calculate_profit(true_values, predicted_values):
    sorted_predictions = pd.Series(predicted_values).sort_values(ascending=False)[:points_200]
    true_values_sorted = (true_values.reset_index(drop=True)[sorted_predictions.index])
    total_true_values = true_values_sorted.sum() 
    return round((total_true_values * price_per_barrel) - budget, 2)


# In[3]:


def calculate_confidence_interval(true_values, predicted_values):
    bootstrap_samples = []
    state = np.random.RandomState(12345)
    for i in tqdm(range(1000)):
        bootstrap_sample = pd.Series(predicted_values).sample(n=points_500, replace=True, random_state=state)
        bootstrap_samples.append(calculate_profit(true_values, bootstrap_sample))
    
    bootstrap_samples = pd.Series(bootstrap_samples)
    print(bootstrap_samples.mean())
    print(bootstrap_samples.apply(lambda x: x < 0).sum() / len(bootstrap_samples) * 100, "%")
    
    lower_bound = bootstrap_samples.quantile(0.025)
    upper_bound = bootstrap_samples.quantile(0.975)
    return round(lower_bound, 2), round(upper_bound, 2)


# –ó–∞–≥—Ä—É–∂—É –∏ –ø—Ä–æ–≤–µ—Ä—é –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[4]:


data_geo_1 = '/datasets/geo_data_0.csv'

if os.path.exists(data_geo_1):
    df_geo_1 = pd.read_csv(data_geo_1)
else:
    print('Something is wrong')


# In[5]:


df_geo_1.head()


# In[6]:


df_geo_1.info()


# In[7]:


df_geo_1.describe()


# In[8]:


df_geo_1.duplicated().sum()


# In[9]:


df_geo_1.corr()


# –ü—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –Ω–µ—Ç, –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∞–∫ –∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä–≥—É –¥—Ä—É–≥–∞ - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ.

# –ó–∞–≥—Ä—É–∂—É –∏ –ø—Ä–æ–≤–µ—Ä—é –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ç–æ—Ä–æ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[10]:


data_geo_2 = '/datasets/geo_data_1.csv'

if os.path.exists(data_geo_2):
    df_geo_2 = pd.read_csv(data_geo_2)
else:
    print('Something is wrong')


# In[11]:


df_geo_2.head()


# In[12]:


df_geo_2.info()


# In[13]:


df_geo_2.describe()


# In[14]:


df_geo_2.duplicated().sum()


# In[15]:


df_geo_2.corr()


# –ü—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –Ω–µ—Ç, –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∞–∫ –∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è. –ü—Ä–∏–∑–Ω–∞–∫ f2 —Å–∏–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—Ç —Å —Ü–µ–ª–µ–≤—ã–º, –ø–æ —ç—Ç–æ–º—É –æ—Ç –Ω–µ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–∞–≤–∏—Ç—å—Å—è.

# In[16]:


# df_geo_2_without_f2 = df_geo_2.drop(["f2"],axis = 1)


# –ó–∞–≥—Ä—É–∂—É –∏ –ø—Ä–æ–≤–µ—Ä—é –Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∏, –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–µ—Ç—å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[17]:


data_geo_3 = '/datasets/geo_data_2.csv'

if os.path.exists(data_geo_3):
    df_geo_3 = pd.read_csv(data_geo_3)
else:
    print('Something is wrong')


# In[18]:


df_geo_3.head()


# In[19]:


df_geo_3.info()


# In[20]:


df_geo_3.describe()


# In[21]:


df_geo_3.duplicated().sum()


# In[22]:


df_geo_3.corr()


# –ü—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö –Ω–µ—Ç, –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç–∞–∫ –∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∞–Ω–æ–º–∞–ª–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è. –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥—Ä–≥—É –¥—Ä—É–≥–∞ - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ.

# ## –û–±—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏

# –û–±—É—á–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[23]:


features = df_geo_1.drop(["id","product"], axis = 1)
target = df_geo_1["product"]

features_train, features_valid_first, target_train, target_valid_first = train_test_split(
    features, target, test_size=0.25, random_state=12345)

model = LinearRegression()
model.fit(features_train, target_train)
predictions_valid_first = model.predict(features_valid_first)
result = mean_squared_error(target_valid_first, predictions_valid_first) ** 0.5
print("RMSE –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:", result)


# In[24]:


df_geo_1_mean_values = df_geo_1["product"].mean()
print(f"–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {df_geo_1_mean_values:.4f} —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π")


# –û–±—É—á–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –ø–æ –≤—Ç–æ—Ä–æ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[25]:


features = df_geo_2.drop(["id","product"], axis = 1)
target = df_geo_2["product"]

features_train, features_valid_second, target_train, target_valid_second = train_test_split(
    features, target, test_size=0.25, random_state=12345)

model = LinearRegression()
model.fit(features_train, target_train)
predictions_valid_second = model.predict(features_valid_second)
result = mean_squared_error(target_valid_second, predictions_valid_second) ** 0.5
print("RMSE –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:", result)


# In[26]:


df_geo_2_mean_values = df_geo_2["product"].mean()
print(f"–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {df_geo_2_mean_values:.4f} —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π")


# –û–±—É—á–∏–º –∏ –ø—Ä–æ–≤–µ—Ä–∏–º –º–æ–¥–µ–ª—å –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –ø–æ —Ç—Ä–µ—Ç—å–µ–º—É —Ä–µ–≥–∏–æ–Ω—É

# In[27]:


features = df_geo_3.drop(["id","product"], axis = 1)
target = df_geo_3["product"]

features_train, features_valid_third, target_train, target_valid_third = train_test_split(
    features, target, test_size=0.25, random_state=12345)

model = LinearRegression()
model.fit(features_train, target_train)
predictions_valid_third = model.predict(features_valid_third)
result = mean_squared_error(target_valid_third, predictions_valid_third) ** 0.5
print("RMSE –º–æ–¥–µ–ª–∏ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ:", result)


# In[28]:


df_geo_3_mean_values = df_geo_3["product"].mean()
print(f"–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {df_geo_3_mean_values:.4f} —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π")


# –í—ã–≤–æ–¥:
# 1. –í –ø–µ—Ä–≤–æ–º —Ä–µ–≥–∏–æ–Ω–µ –æ—à–∏–±–∫–∞ —Å–∞–º–∞—è –º–∞–ª–µ–Ω—å–∫–∞—è, –Ω–æ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∞—Å–∞ —Å—ã—Ä—å—è –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–µ—Å—Ç–µ
# 2. –í–æ –≤—Ç–æ—Ä–æ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –æ—à–∏–±–∫–∞, –∞ —Ç–∞–∫ –∂–µ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –∑–∞–ø–∞—Å—É —Å—ã—Ä—å—è —Å—Ç–æ–∏—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–µ—Å—Ç–µ
# 3. –í —Ç—Ä–µ—Ç—å–µ–º —Ä–µ–≥–∏–æ–Ω–µ –æ—à–∏–±–∫–∞ –∏–¥–µ—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–µ—Å—Ç–µ, –Ω–æ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—é —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞ —Å—ã—Ä—å—è —Ä–µ–≥–∏–æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞—Å—á—ë—Ç—É –ø—Ä–∏–±—ã–ª–∏

# In[29]:


budget = 10000000000
points_500 = 500
points_200 = 200
price_per_barrel = 450000
loss_probability = 0.025
non_loss_points = (budget/(price_per_barrel*1000))/points_200

print("–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä—ë–º —Å—ã—Ä—å—è –¥–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã: {:.2f} —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π".format(non_loss_points))


# In[30]:


percentage_above_threshold_geo_1 = (df_geo_1['product'] >= non_loss_points*1000).mean() * 100
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω –≤ –ø–µ—Ä–≤–æ–º —Ä–µ–≥–∏–æ–Ω–µ: {percentage_above_threshold_geo_1:.2f}%")


# In[31]:


percentage_above_threshold_geo_2 = (df_geo_2['product'] >= non_loss_points*1000).mean() * 100
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω –≤–æ –≤—Ç–æ—Ä–æ–º —Ä–µ–≥–∏–æ–Ω–µ: {percentage_above_threshold_geo_2:.2f}%")


# In[32]:


percentage_above_threshold_geo_3 = (df_geo_3['product'] >= non_loss_points*1000).mean() * 100
print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω –≤ —Ç—Ä–µ—Ç—å–µ–º —Ä–µ–≥–∏–æ–Ω–µ: {percentage_above_threshold_geo_3:.2f}%")


# –ò—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—â–∏–µ –≤—ã–≤–æ–¥—ã:
# 
# –î–ª—è –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –æ–±—ä–µ–º —Å—ã—Ä—å—è —Å–æ—Å—Ç–∞–≤–ª—è–ª –Ω–µ –º–µ–Ω–µ–µ 0.11 —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π.
# 
# - –ü–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω –æ–±–ª–∞–¥–∞–µ—Ç –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω —Å—Ä–µ–¥–∏ —Ç—Ä–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, —Å–æ—Å—Ç–∞–≤–ª—è—è 36.58%. –ü—Ä–∏ —ç—Ç–æ–º —Å—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å —Å–∫–≤–∞–∂–∏–Ω—ã –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—ã—Å–æ–∫ –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 92.5000 —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π.
# 
# - –í—Ç–æ—Ä–æ–π —Ä–µ–≥–∏–æ–Ω –∏–º–µ–µ—Ç —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω (16.54%) —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤, –∏ —Å—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å —Å–∫–≤–∞–∂–∏–Ω—ã –≤ —ç—Ç–æ–º —Ä–µ–≥–∏–æ–Ω–µ —Ç–∞–∫–∂–µ –º–µ–Ω—å—à–µ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –ø–µ—Ä–≤—ã–º —Ä–µ–≥–∏–æ–Ω–æ–º, —Å–æ—Å—Ç–∞–≤–ª—è—è 68.8250 —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π.
# 
# - –¢—Ä–µ—Ç–∏–π —Ä–µ–≥–∏–æ–Ω –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω (38.18%) –∏ –∏–º–µ–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å –Ω–∞ —É—Ä–æ–≤–Ω–µ 95.0000 —Ç—ã—Å—è—á –±–∞—Ä—Ä–µ–ª–µ–π.
# 
# –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ—Ç–∏–π —Ä–µ–≥–∏–æ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–∫–≤–∞–∂–∏–Ω, —É—á–∏—Ç—ã–≤–∞—è –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –±–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω, —Ç–∞–∫ –∏ —Å—Ä–µ–¥–Ω–∏–π –∑–∞–ø–∞—Å —Å—ã—Ä—å—è.

# ## –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∏—Å–∫–æ–≤ 

# In[33]:


top_200_first_region = calculate_profit(target_valid_first, predictions_valid_first)
print("–ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω –≤ –ø–µ—Ä–≤–æ–º —Ä–µ–≥–∏–æ–Ω–µ:", top_200_first_region)


# In[34]:


top_200_second_region = calculate_profit(target_valid_second, predictions_valid_second)
print("–ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω –≤–æ –≤—Ç–æ—Ä–æ–º —Ä–µ–≥–∏–æ–Ω–µ:", top_200_second_region)


# In[35]:


top_200_third_region = calculate_profit(target_valid_third, predictions_valid_third)
print("–ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω –≤ —Ç—Ä–µ—Ç—å–µ–º —Ä–µ–≥–∏–æ–Ω–µ:", top_200_third_region)


# In[36]:


print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ª–µ–∂–∏—Ç –º–µ–∂–¥—É:",
      calculate_confidence_interval(target_valid_first, pd.Series(predictions_valid_first)))


# In[37]:


print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏—Ç–µ—Ä–≤–∞–ª –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ª–µ–∂–∏—Ç –º–µ–∂–¥—É:",
      calculate_confidence_interval(target_valid_second, pd.Series(predictions_valid_second)))


# In[38]:


print("95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ª–µ–∂–∏—Ç –º–µ–∂–¥—É:",
      calculate_confidence_interval(target_valid_third, pd.Series(predictions_valid_third)))


# –ò—Å—Ö–æ–¥—è –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—â–∏–µ –≤—ã–≤–æ–¥—ã:
# 
# –ü–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω:
# 
# - –ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 3,320,826,043.14.
# - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã: 396,164,984.80.
# - –†–∏—Å–∫–∏: 6.9%.
# - 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: (-111,215,545.89, 909,766,941.55).
# 
# –í—Ç–æ—Ä–æ–π —Ä–µ–≥–∏–æ–Ω:
# 
# - –ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2,415,086,696.68.
# - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã: 456,045,105.78.
# - –†–∏—Å–∫–∏: 1.5%.
# - 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: (-4,286,021,657.67, -3,131,804,233.85).
# 
# –¢—Ä–µ—Ç–∏–π —Ä–µ–≥–∏–æ–Ω:
# 
# - –ü—Ä–∏–±—ã–ª—å —Å –ª—É—á—à–∏—Ö 200 —Å–∫–≤–∞–∂–∏–Ω —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2,710,349,963.60.
# - –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å —Å –æ–¥–Ω–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã: 404,403,866.57.
# - –†–∏—Å–∫–∏: 7.6%.
# - 95% –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: (-163,350,413.39, 950,359,574.93).
# 
# –û–±—â–∏–µ –≤—ã–≤–æ–¥—ã:
# 
# –í—Ç–æ—Ä–æ–π —Ä–µ–≥–∏–æ–Ω –≤—ã–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–π —Å—Ä–µ–¥–∏ —Ç—Ä–µ—Ö, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–∞–∏–ª—É—á—à–∏–º –≤—ã–±–æ—Ä–æ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∏—Å–∫–∞–º –∏ –±—é–¥–∂–µ—Ç—É. –†–∏—Å–∫–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã ‚Äì –≤—Å–µ–≥–æ 1.5%, —á—Ç–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è–º –∑–∞–¥–∞–Ω–∏—è, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —É–±—ã—Ç–∫–æ–≤ –º–µ–Ω–µ–µ 2.5%.
# –ü–µ—Ä–≤—ã–π –∏ —Ç—Ä–µ—Ç–∏–π —Ä–µ–≥–∏–æ–Ω—ã —Ç–∞–∫–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–æ —Å–ª–µ–¥—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ –≤–∑–≤–µ—Å–∏—Ç—å —Ä–∏—Å–∫–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –ø–µ—Ä–µ–¥ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º.
